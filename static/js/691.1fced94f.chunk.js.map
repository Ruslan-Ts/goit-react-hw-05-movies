{"version":3,"file":"static/js/691.1fced94f.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 480px;\n  object-fit: cover;\n  background-size: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const MovieTitle = styled.h2`\n  font-family: 'Arial';\n  font-style: normal;\n  font-weight: 700;\n  text-decoration: none;\n  color: #000000;\n`;\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Circles } from 'react-loader-spinner';\nimport Notiflix from 'notiflix';\nimport { List, MovieItem, Image, MovieTitle } from './MovieList.styled';\n\nconst MovieList = ({ isLoading, isError, movies }) => {\n  return (\n    <List>\n      {isLoading && (\n        <Circles\n          height=\"80\"\n          width=\"80\"\n          color=\"blue\"\n          ariaLabel=\"circles-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {isError && Notiflix.Notify.warning('Something went wrong! ')}\n      {movies.map(({ id, poster_path, title }) => {\n        return (\n          <MovieItem key={id}>\n            <Link\n              style={{ textDecoration: 'none', textAlign: 'center' }}\n              to={`/movies/${id}`}\n            >\n              <div>\n                <Image\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                      : 'https://st2.depositphotos.com/4323461/9818/v/450/depositphotos_98187808-stock-illustration-oops-problem-man-business-concept.jpg}'\n                  }\n                  alt={title}\n                />\n              </div>\n              <MovieTitle>{title}</MovieTitle>\n            </Link>\n          </MovieItem>\n        );\n      })}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  isError: PropTypes.bool.isRequired,\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin: 40px;\n`;\n\nexport const Btn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const BtnText = styled.span`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\nimport { SearchForm, SearchFormInput, Btn, BtnText } from './Movies.styled';\nimport MovieList from 'components/MovieList/MovieList.jsx';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [foundedMovies, setFoundedMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryFromSearchParams = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (queryFromSearchParams === null) {\n      return;\n    }\n    setIsLoading(true);\n    const fetchFoo = async searchWord => {\n      try {\n        const {\n          data: { results },\n        } = await axios.get(\n          `https://api.themoviedb.org/3/search/movie?query=${queryFromSearchParams}&api_key=ac5224eaea5eecab8d1620632b5b6c95`\n        );\n        if (!results.length) {\n          Notiflix.Notify.warning('There is no movies');\n        }\n        const filteredMovies = results.map(({ id, poster_path, title }) => ({\n          id,\n          poster_path,\n          title,\n        }));\n        setFoundedMovies(filteredMovies);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFoo(queryFromSearchParams);\n  }, [queryFromSearchParams, searchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    let value = e.target.elements.search.value;\n\n    setSearchQuery(value.toLowerCase().trim());\n    setSearchParams({ query: value.toLowerCase().trim() });\n\n    if (searchQuery.trim() === '') {\n      Notiflix.Notify.warning('Type something');\n      value = '';\n      return;\n    }\n    setSearchQuery('');\n  };\n\n  return (\n    <>\n      <div>\n        <SearchForm onSubmit={handleSubmit}>\n          <Btn type=\"submit\">\n            <svg\n              stroke=\"#000\"\n              fill=\"#000\"\n              strokeWidth=\"0\"\n              viewBox=\"0 0 448 512\"\n              height=\"12px\"\n              width=\"12px\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M448 449L301.2 300.2c20-27.9 31.9-62.2 31.9-99.2 0-93.1-74.7-168.9-166.5-168.9C74.7 32 0 107.8 0 200.9s74.7 168.9 166.5 168.9c39.8 0 76.3-14.2 105-37.9l146 148.1 30.5-31zM166.5 330.8c-70.6 0-128.1-58.3-128.1-129.9S95.9 71 166.5 71s128.1 58.3 128.1 129.9-57.4 129.9-128.1 129.9z\"></path>\n            </svg>\n            <BtnText>Search</BtnText>\n          </Btn>\n\n          <SearchFormInput\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n            type=\"text\"\n            name=\"search\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n        </SearchForm>\n      </div>\n      <div>\n        <Link\n          style={{ textDecoration: 'none', textAlign: 'center' }}\n          to={`/movies/${foundedMovies.id}`}\n          state={{ from: location }}\n        >\n          <MovieList\n            isLoading={isLoading}\n            isError={isError}\n            movies={foundedMovies}\n          />\n        </Link>\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["List","styled","MovieItem","Image","MovieTitle","isLoading","isError","movies","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Notiflix","map","id","poster_path","title","style","textDecoration","textAlign","to","src","alt","SearchForm","Btn","SearchFormInput","BtnText","useState","searchQuery","setSearchQuery","foundedMovies","setFoundedMovies","setIsLoading","setIsError","useSearchParams","searchParams","setSearchParams","queryFromSearchParams","get","location","useLocation","useEffect","fetchFoo","searchWord","axios","results","data","length","filteredMovies","onSubmit","e","preventDefault","value","target","elements","search","toLowerCase","trim","query","type","stroke","fill","strokeWidth","viewBox","xmlns","d","onChange","name","autoComplete","autoFocus","placeholder","state","from","MovieList"],"sourceRoot":""}